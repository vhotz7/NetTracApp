@model IEnumerable<NetTracApp.Models.InventoryItem>

@{
    ViewData["Title"] = "Tier2Dashboard";
}
<div class="top-border" style="background-color: #970000; color: #ffff00; height: 80px; border-radius: 8px; margin: 20px auto; padding-left: 20px; display: flex; align-items: center; position: relative; max-width: 100%; width: 1450px;">
    <!-- background text "NetTrac" -->
    <span class="background-text" style="font-size: 70px; font-family: Impact;">NetTrac</span>

    <span id="circle" style="background: black; border-radius: 50%; width: 75px; height: 75px; position: absolute; left: 10px; top: 50%; transform: translateY(-50%);"></span>

    <!-- Centered Text "IT Network Tracker" -->
    <span class="centered-text" style="margin: 0 auto; font-size: 45px; font-family: Impact; color: #ffffff;">IT Network Tracker</span>

    <!-- Home and Login Icons -->
    <span class="icons" style="display: flex; align-items: center; margin-right: 30px;">
        <a href="@Url.Action("Tier2Dashboard", "Tier2")" style="margin-right: 20px; text-decoration: none; color: white;">
            <i class="bi bi-house-door" style="font-size: 2.5rem;"></i>
        </a>
        <a href="@Url.Action("Index", "Login")" style="text-decoration: none; color: white;">
            <i class="bi bi-box-arrow-right" style="font-size: 2.5rem;"></i>
        </a>
    </span>
</div>

<style>
    .delete-button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px; /* Optional: Add some spacing from other elements */
    }
    .actions-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px; /* Add space between the form and the link */
    }

    /* Upload form styling */
    .upload-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 5px; /* Add space between label and input */
    }

    /* Styling for the file input and button alignment */
    .upload-controls {
        display: flex;
        align-items: center;
        gap: 10px; /* Add space between input and button */
    }


    /* Ensure table uses full width and adapts dynamically */
    #inventoryTable {
        width: 100%; /* Use available width */
        max-width: 1800px; /* Adjust for expanded view */
        margin: 0 auto; /* Center the table horizontally */
        font-size: 14px;
        border-collapse: collapse; /* Prevent double borders */
        table-layout: auto; /* Allow columns to resize based on content */
    }

    /* Ensure table headers and data cells align properly */
    th, td {
        padding: 12px 8px; /* Add padding for readability */
        text-align: center;
        white-space: nowrap; /* Prevent text wrapping */
    }

    

    /* Extra columns are hidden by default */
    .extra-column {
        display: none;
    }

    /* Scrollable table on smaller screens */
    .table-responsive {
        overflow-x: auto;
        margin-bottom: 20px;
    }

    /* Ensure checkboxes are properly aligned */
    .checkbox-column {
        width: 35px; /* Adjust width as needed */
        text-align: center;
    }

    .form-check-input {
        width: 12px;
        height: 12px;
        margin: 0 auto;
        display: block;
    }

    /* Edit button styling */
    .btn-edit {
        background-color: #ac3e0b;
        color: white;
        font-weight: bold;
        padding: 10px 15px;
        border: none;
        cursor: pointer;
    }

        .btn-edit:hover {
            background-color: #e05c1a;
        }

    /* Delete button styling */
    .btn-delete {
        background-color: #970000;
        color: white;
        font-weight: bold;
        padding: 10px 15px;
        border: none;
        cursor: pointer;
    }

        .btn-delete:hover {
            background-color: #b30000;
        }

    /* "Create New Item" button styling */
    .btn-custom-orange {
        background-color: #ac3e0b;
        color: white;
        font-weight: bold;
        padding: 10px 15px;
        border: none;
        cursor: pointer;
    }

        .btn-custom-orange:hover {
            background-color: #e05c1a;
        }

    .toggle-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }

    .toggle-button {
        width: 40px;
        height: 20px;
        background-color: #ddd; /* default color when off */
        border: none;
        border-radius: 10px;
        position: relative;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-right: 10px; /* space between button and text */
    }

        .toggle-button.active {
            background-color: #ac3e0b; /* orange color when active */
        }

        .toggle-button::before {
            content: "";
            position: absolute;
            top: 2px;
            left: 2px;
            width: 16px;
            height: 16px;
            background-color: white;
            border-radius: 50%;
            transition: transform 0.3s;
        }

        .toggle-button.active::before {
            transform: translateX(20px); /* move toggle circle when active */
        }
    /* Ensure content is vertically aligned */
    .table th, .table td {
        vertical-align: middle;
    }

    /* Add spacing at the bottom */
    .container {
        padding-bottom: 70px;
    }

    /* Smooth transition when showing extra columns */
    .extra-column {
        display: none;
        transition: display 0.3s;
    }
</style>

<div class="search-border" style="background-color: black; height: 45px; display: flex; align-items: center; justify-content: space-between; padding-left: 10px; padding-right: 10px; border-radius: 8px; margin-top: 20px; margin-bottom: 5px; max-width: 2000px; margin-left: auto; margin-right: auto; box-sizing: border-box;">
    <div class="search-text" style="color: orange; font-size: 15px; display: flex; align-items: center;">
        Search Inventory
    </div>



    <div class="search-length" style="flex-grow: 1; max-width: 800px; padding-left: 10px;">
        <!-- Search Form -->
        <div class="search-form" style="width: 100%;">
            <form asp-action="Tier2Dashboard" method="get" style="width: 100%; display: flex; align-items: center;">
                <div class="form-group" style="margin-bottom: 0; width: 100%; display: flex; align-items: center;">
                    <input type="text" name="searchString" class="form-control" placeholder="Search by Vendor or Serial Number" style="height: 35px; width: 100%; box-sizing: border-box;" />
                </div>
            </form>
        </div>
    </div>

    <div class="toggle-container" style="display: flex; align-items: center; justify-content: center;">
        <span class="toggle-text" style="color: white; font-weight: bold; margin-right: 10px;">
            Data View
        </span>
        <button id="toggleExpand" class="toggle-button" onclick="toggleColumns()" style="height: 20px; display: flex; align-items: center; justify-content: center;"></button>
    </div>
</div>




<!-- CSV Upload Form -->
<div class="mb-4">
    <form asp-action="UploadFile" method="post" enctype="multipart/form-data">
        <div class="form-group">
            <!-- Wrap file input and upload button in a flexbox container -->
            <label for="file">Upload CSV File(s):</label>
            <div style="display: flex; align-items: center;">
                <!-- File input field allowing multiple file uploads -->
                <input type="file" name="files" class="form-control-file" multiple style="margin-right: 10px;" />
                <!-- Button placed directly next to the file input field -->
                <button type="submit" class="btn btn-custom-orange" style="height: auto;">Upload</button>
            </div>
        </div>
    </form>
</div>

<div style="text-align: right; margin-bottom: 10px;">
    <a asp-controller="Tier2" asp-action="Create" style="color: #ac3e0b; font-weight: bold; text-decoration: none;">
        Create New Inventory Item
    </a>
</div>



<form method="post" asp-action="RequestDelete" id="bulkDeleteForm">
    <table id="inventoryTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th class="checkbox-column">
                    <input type="checkbox" class="form-check-input" id="selectAll" />
                </th>
                <th>Vendor</th>
                <th>Device Type</th>
                <th>Serial #</th>
                <th>Host Name</th>
                <th>Asset Tag</th>
                <th>Current Location</th>
                <th>Future Location</th>
                <th>Status</th>
                <th>Date Received</th>
                <th>Part ID</th>
                <th class="extra-column">Back Ordered</th>
                <th class="extra-column">Notes</th>
                <th class="extra-column">Product Description</th>
                <th class="extra-column">Ready</th>
                <th class="extra-column">Legacy Device</th>
                <th class="extra-column">Modified</th>
                <th class="extra-column">Created</th>
                <th class="extra-column">Created By</th>
                <th class="extra-column">Modified By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
    @if (Model != null && Model.Any())
    {
        foreach (var item in Model)
        {
            <tr>
                <td class="checkbox-column">
                    <input type="checkbox" class="form-check-input" name="selectedItems" value="@item.Id" />
                </td>
                <td>@item.Vendor</td>
                <td>@item.DeviceType</td>
                <td>@item.SerialNumber</td>
                <td>@item.HostName</td>
                <td>@item.AssetTag</td>
                <td>@item.CurrentLocation</td>
                <td>@item.FutureLocation</td>
                <td>@item.Status</td>
                <td>@item.DateReceived.ToString("MM/dd/yyyy")</td>
                <td>@item.PartID</td>
                <td class="extra-column">@item.BackOrdered</td>
                <td class="extra-column">@item.Notes</td>
                <td class="extra-column">@item.ProductDescription</td>
                <td class="extra-column">@item.Ready</td>
                <td class="extra-column">@item.LegacyDevice</td>
                <td class="extra-column">@item.Modified</td>
                <td class="extra-column">@item.Created</td>
                <td class="extra-column">@item.CreatedBy</td>
                <td class="extra-column">@item.ModifiedBy</td>
                <td>
                    <!-- Edit Button -->
                    <a asp-action="Edit" asp-controller="Tier2" asp-route-id="@item.Id" class="btn btn-edit btn-sm">
                        Edit
                    </a>

                    <!-- Request Deletion Button -->
                            <a asp-action="RequestDelete"
                               asp-controller="Tier2"
                               asp-route-id="@item.Id"
                               class="btn btn-delete btn-sm">
                                Delete
                            </a>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="20" class="text-center">No inventory items found.</td>
        </tr>
    }
</tbody>

    </table>
    <div class="delete-button-container">
          <form asp-controller="Tier2" asp-action="RequestDelete" method="post">
            <button type="submit" class="btn btn-delete btn-sm">Delete Requested Items</button>
        </form>
    </div>

  
</form>





<script>
    function handleBulkDeleteRequest(event) {
        event.preventDefault(); // Prevent the default form submission

        const checkboxes = document.querySelectorAll('input[name="selectedItems"]:checked');
        if (checkboxes.length === 0) {
            alert('No items selected for deletion.');
            return false; // Prevent further actions
        }

        const confirmationMessage = `Are you sure you want to request deletion for the selected items?`;
        if (!confirm(confirmationMessage)) {
            return false; // If the user cancels, do not submit the form
        }

        // If the user confirms, submit the form via AJAX
        const formData = new FormData(event.target); 

        fetch('@Url.Action("DeleteSelected", "Tier2")', { 
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text(); 
        })
        .then(data => {
            // Show basic alert pop-up
            alert("The items have been routed to Tier 3 for approval!");
            // Optionally refresh the page or update the UI accordingly
             location.reload(); 
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
            alert("An error occurred while processing your request.");
        });

        return false; 
    }

    // Select/Deselect all checkboxes
    document.getElementById('selectAll').addEventListener('change', function (e) {
        const checkboxes = document.querySelectorAll('input[name="selectedItems"]');
        checkboxes.forEach(checkbox => checkbox.checked = e.target.checked);
    });

</script>

<script>
    // JavaScript function to toggle the display of extra columns
    function toggleColumns() {
        var toggleButton = document.getElementById("toggleExpand");
        var extraColumns = document.querySelectorAll(".extra-column");
        var isActive = toggleButton.classList.toggle("active");

        // Show or hide extra columns based on toggle button state
        extraColumns.forEach(function (column) {
            column.style.display = isActive ? "table-cell" : "none";
        });
    }
</script>

<!-- Print Button -->
<button onclick="printInventoryTable()" class="btn btn-primary" style="margin-top: 20px;">Print Inventory</button>

<script>
    function printInventoryTable() {
        var printContents = document.getElementById("inventoryTable").outerHTML;
        var originalContents = document.body.innerHTML;

        // Set the table contents in the body for printing
        document.body.innerHTML = printContents;

        // Trigger the print dialog
        window.print();

        // Restore the original contents after printing
        document.body.innerHTML = originalContents;
        window.location.reload(); // Reload to ensure scripts and layout restore
    }
</script>

<style>
    @@media print {
        /* Hide everything except the table */
        body * {
            visibility: hidden;
        }

        #inventoryTable, #inventoryTable * {
            visibility: visible;
        }

        #inventoryTable {
            position: absolute;
            left: 0;
            top: 0;
        }
    }
</style>

