@model IEnumerable<NetTracApp.Models.InventoryItem>

@{
    ViewData["Title"] = "Approve Deletion Requests and Manage Inventory";
}

<style>
    /* Make the entire table wider */
    #inventoryTable {
        width: 100%; /* Adjust as needed, e.g., 80%, 1200px */
        max-width: 1500px; /* Optional: Limit maximum width */
        margin: 0 auto; /* Center the table horizontally */
        font-size: 14px;
    }




    /* Extra columns hidden by default */
    .extra-column {
        display: none;
    }
    /* Make the checkbox column narrow */
    th.checkbox-column, td.checkbox-column {
        width: 35px; /* Adjust this value as needed */
        text-align: center; /* Align checkboxes in the center */
    }

    /* Ensure the checkboxes are small */
    .form-check-input {
        width: 10px;
        height: 10px;
        margin: 0 auto;
        display: block;
    }

    /* Prevent wrapping in table headers */
    #inventoryTable th {
        white-space: nowrap;
    }

    /* Prevent table rows from expanding */
    #inventoryTable td, #inventoryTable th {
        white-space: nowrap; /* Prevent content from wrapping */
        padding: 8px; /* Adjust padding for consistent row height */
        vertical-align: middle; /* Keep checkbox centered vertically */
    }

    /* Optional: Keep table layout fixed to prevent columns from shifting */
    #inventoryTable {
        table-layout: fixed;
    }

    /* Align text in the center of checkbox columns */
    .checkbox-column {
        text-align: center;
    }

    .table th, .table td {
        vertical-align: middle; /* Align content vertically in the center */
        text-align: center; /* Center-align text horizontally */
    }

    .select-column {
        width: 50px; /* Narrow width for the checkbox column */
    }

    .table-responsive {
        overflow-x: auto; /* Ensure table is scrollable on smaller screens */
    }



    /* Adjust input box size */
    .form-control {
        width: 100%;
        height: 40px; /* Adjust height to match the design */
        font-size: 1rem; /* Adjust font size */
    }

    /* custom style for the edit button */
    .btn-edit {
        background-color: #ac3e0b; /* default orange color for edit button */
        color: white;
        border: none;
    }

        .btn-edit:hover,
        .btn-edit:focus {
            background-color: #e05c1a; /* lighter orange color on hover */
            color: white; /* keep text white on hover */
            border: none;
        }

    /* custom style for the delete button */
    .btn-delete {
        background-color: #970000; /* default red color for delete button */
        color: white;
        border: none;
    }

        .btn-delete:hover,
        .btn-delete:focus {
            background-color: #b30000; /* lighter red color on hover */
            color: white; /* keep text white on hover */
            border: none;
        }

    /* custom style for the "create new inventory item" button */
    .btn-custom-orange {
        background-color: #ac3e0b; /* orange background color */
        color: white; /* white text color */
        border: none;
        padding: 5px 10px; /* adjust padding to match other buttons */
        display: inline-block; /* keep the button inline */
        margin: 20px auto; /* center horizontally with margin */
        text-align: center; /* center text */
        font-weight: bold; /* make the text bold */
        font-size: 14px; /* adjust font size to match other buttons */
    }

        .btn-custom-orange:hover {
            background-color: #e05c1a; /* lighter orange color on hover */
            color: white;
        }

    /* toggle switch styling */
    .toggle-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }

    .toggle-button {
        width: 40px;
        height: 20px;
        background-color: #ddd; /* default color when off */
        border: none;
        border-radius: 10px;
        position: relative;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-right: 10px; /* space between button and text */
    }

        .toggle-button.active {
            background-color: #ac3e0b; /* orange color when active */
        }

        .toggle-button::before {
            content: "";
            position: absolute;
            top: 2px;
            left: 2px;
            width: 16px;
            height: 16px;
            background-color: white;
            border-radius: 50%;
            transition: transform 0.3s;
        }

        .toggle-button.active::before {
            transform: translateX(20px); /* move toggle circle when active */
        }

    /* prevent footer or buttons from being cut off */
    .container {
        padding-bottom: 70px; /* space at the bottom to prevent cutoff */
    }

    /* style adjustments for form container to ensure it doesn't cut off */
    .form-horizontal {
        padding-bottom: 70px; /* extra padding at the bottom */
    }

    /* hide additional columns by default */
    .extra-column {
        display: none;
    }
</style>



<div class="search-border" style="background-color: black; height: 45px; display: flex; align-items: center; justify-content: space-between; padding-left: 10px; padding-right: 10px; border-radius: 8px; margin-top: 20px; margin-bottom: 5px; max-width: 2000px; margin-left: auto; margin-right: auto; box-sizing: border-box;">
    <div class="search-text" style="color: orange; font-size: 15px; display: flex; align-items: center;">
        Search Inventory
    </div>



    <div class="search-length" style="flex-grow: 1; max-width: 800px; padding-left: 10px;">
        <!-- Search Form -->
        <div class="search-form" style="width: 100%;">
            <form asp-action="ApproveDeletions" method="get" style="width: 100%; display: flex; align-items: center;">
                <div class="form-group" style="margin-bottom: 0; width: 100%; display: flex; align-items: center;">
                    <input type="text" name="searchString" class="form-control" placeholder="Search by Vendor or Serial Number" style="height: 35px; width: 100%; box-sizing: border-box;" />
                </div>
            </form>
        </div>
    </div>

    <div class="toggle-container" style="display: flex; align-items: center; justify-content: center;">
        <span class="toggle-text" style="color: white; font-weight: bold; margin-right: 10px;">
            Data View
        </span>
        <button id="toggleExpand" class="toggle-button" onclick="toggleColumns()" style="height: 20px; display: flex; align-items: center; justify-content: center;"></button>
    </div>
</div>


<!-- Approve/Reject Section -->
<h3>Approve Pending Deletion Requests</h3>
@if (!Model.Any(i => i.PendingDeletion && !i.DeletionApproved))
{
    <p style="color: gray;">No pending deletion requests at this time.</p>
}
else
{

    <form asp-action="ApproveAll" method="post">
        <button type="submit" class="btn btn-delete btn-sm">Approve All</button>
    </form>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Serial Number</th>
                <th>Vendor</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Where(i => i.PendingDeletion && !i.DeletionApproved))
            {
                <tr>
                    <td>@item.SerialNumber</td>
                    <td>@item.Vendor</td>
                    <td>
                        <!-- Approve Button -->
                        <form asp-action="ApproveDeletion" method="post" style="display:inline;">
                            <input type="hidden" name="id" value="@item.Id" />
                            <button type="submit" class="btn btn-custom-orange">Approve</button>
                        </form>

                        <!-- Deny Button -->
                        <form asp-action="DenyDeletion" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to deny this deletion request?');">
                            <input type="hidden" name="id" value="@item.Id" />
                            <button type="submit" class="btn btn-delete btn-sm">Deny</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- CSV Upload Form -->
<div class="mb-4">
    <form asp-action="UploadFile" method="post" enctype="multipart/form-data">
        <div class="form-group">
            <!-- Wrap file input and upload button in a flexbox container -->
            <label for="file">Upload CSV File(s):</label>
            <div style="display: flex; align-items: center;">
                <!-- File input field allowing multiple file uploads -->
                <input type="file" name="files" class="form-control-file" multiple style="margin-right: 10px;" />
                <!-- Button placed directly next to the file input field -->
                <button type="submit" class="btn btn-custom-orange" style="height: auto;">Upload</button>
            </div>
        </div>
    </form>
</div>

<div style="text-align: right; margin-bottom: 10px;">
    <a asp-controller="InventoryItems" asp-action="Create" style="color: #ac3e0b; font-weight: bold; text-decoration: none;">
        Create New Inventory Item
    </a>
</div>


<!-- Inventory Table -->
<form asp-action="DeleteSelected" method="post">
    <table id="inventoryTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <!-- Select All Checkbox Column -->
                <th class="checkbox-column">
                    <input type="checkbox" class="form-check-input" id="selectAll" />
                </th>
                <th>Vendor</th>
                <th>Device Type</th>
                <th>Serial #</th>
                <th>Host Name</th>
                <th>Asset Tag</th>
                <th>CurrentLocation</th>
                <th>FutureLocation</th>
                <th>Status</th>
                <th>Date Received</th>
                <th>Part ID</th>
                <th class="extra-column">Back Ordered</th>
                <th class="extra-column">Notes</th>
                <th class="extra-column">Product Description</th>
                <th class="extra-column">Ready</th>
                <th class="extra-column">Legacy Device</th>
                <th class="extra-column">Modified</th>
                <th class="extra-column">Created</th>
                <th class="extra-column">Created By</th>
                <th class="extra-column">Modified By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var item in Model)
                {
                    <tr>
                        <td class="checkbox-column">
                            <input type="checkbox" class="form-check-input" name="selectedItems" value="@item.Id" />
                        </td>
                        <td>@item.Vendor</td>
                        <td>@item.DeviceType</td>
                        <td>@item.SerialNumber</td>
                        <td>@item.HostName</td>
                        <td>@item.AssetTag</td>
                        <td>@item.CurrentLocation</td>
                        <td>@item.FutureLocation</td>
                        <td>@item.Status</td>
                        <td>@item.DateReceived.ToString("MM/dd/yyyy")</td>


                        <td>@item.PartID</td>
                        <td class="extra-column">@item.BackOrdered</td>
                        <td class="extra-column">@item.Notes</td>
                        <td class="extra-column">@item.ProductDescription</td>
                        <td class="extra-column">@item.Ready</td>
                        <td class="extra-column">@item.LegacyDevice</td>
                        <td class="extra-column">@item.Modified</td>
                        <td class="extra-column">@item.Created</td>
                        <td class="extra-column">@item.CreatedBy</td>
                        <td class="extra-column">@item.ModifiedBy</td>
                        <td>
                            <a asp-controller="Tier2EditDashboard" asp-action="Edit" asp-route-id="@item.Id" class="btn btn-edit btn-sm">Edit</a>
                            <a asp-controller="InventoryItems" asp-action="Delete" asp-route-id="@item.Id" class="btn btn-delete btn-sm">Delete</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="20" class="text-center">No inventory items found.</td>
                </tr>
            }
        </tbody>
    </table>
    <button type="submit" class="btn btn-delete btn-sm">Delete Selected (Pending Approval)</button>
</form>

<!-- Print Button -->
<button onclick="printInventoryTable()" class="btn btn-primary" style="margin-top: 20px;">Print Inventory</button>

<script>
    function printInventoryTable() {
        var printContents = document.getElementById("inventoryTable").outerHTML; // Get the table's HTML
        var originalContents = document.body.innerHTML; // Store the original body content

        // Temporarily replace body content with only the table for printing
        document.body.innerHTML = "<table>" + printContents + "</table>";

        // Trigger the print dialog
        window.print();

        // Restore the original contents after printing
        document.body.innerHTML = originalContents;
        window.location.reload(); // Reload to ensure everything is restored
    }
</script>

<style>
    @@media print {
        /* Hide everything except the table */
        body * {
            visibility: hidden;
        }

        #inventoryTable, #inventoryTable * {
            visibility: visible;
        }

        #inventoryTable {
            position: absolute;
            left: 0;
            top: 0;
        }
    }
</style>

<script>
    // JavaScript function to toggle the display of extra columns
    function toggleColumns() {
        var toggleButton = document.getElementById("toggleExpand");
        var extraColumns = document.querySelectorAll(".extra-column");
        var isActive = toggleButton.classList.toggle("active");

        // Show or hide extra columns based on toggle button state
        extraColumns.forEach(function (column) {
            column.style.display = isActive ? "table-cell" : "none";
        });
    }
</script>



@section Scripts {
    <script type="text/javascript">
        window.onload = function () {
            var successMessage = '@TempData["SuccessMessage"]';
            var duplicateMessage = '@TempData["DuplicateMessage"]';

            if (successMessage || duplicateMessage) {
                var message = "";

                if (successMessage) {
                    message += successMessage + "\n";
                }

                if (duplicateMessage) {
                    message += duplicateMessage;
                }

                alert(message.trim());
            }
        };
    </script>
}


<div class="d-flex justify-content-center mt-5">
    <form asp-action="DeleteAll" method="post">
        <button type="submit" class="btn btn-delete">Delete All</button>
    </form>
</div>
<div class="d-flex justify-content-center mt-5">
    <form asp-action="SaveAsNewFile" method="post">
        <button type="submit" class="btn btn-custom-orange">Save As New File</button>
    </form>
</div>



<script>
    // Select all checkboxes when the header checkbox is clicked
    document.getElementById('select-all').addEventListener('change', function (e) {
        const checkboxes = document.querySelectorAll('.row-checkbox');
        checkboxes.forEach(checkbox => checkbox.checked = e.target.checked);
    });

    // Toggle the checkbox when clicking anywhere in a row
    document.querySelectorAll('.selectable-row').forEach(row => {
        row.addEventListener('click', function (e) {
            // Prevent toggling if the user clicked directly on a checkbox
            if (e.target.tagName !== 'INPUT') {
                const checkbox = row.querySelector('.row-checkbox');
                checkbox.checked = !checkbox.checked;
            }
        });
    });
</script>