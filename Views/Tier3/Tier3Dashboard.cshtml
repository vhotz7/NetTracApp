@model IEnumerable<NetTracApp.Models.InventoryItem>

@{
    ViewData["Title"] = "Approve Deletion Requests and Manage Inventory";
    var searchString = ViewData["searchString"] as string;
    var pendingDeletionsCount = (int)(ViewData["PendingDeletionsCount"] ?? 0);
    ViewData["CenteredText"] = "IT Network Tracker";
    ViewData["HomeLink"] = Url.Action("Tier3Dashboard", "Tier3");
}

<head>
    <!-- Site-wide custom styles (site.css) -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>

<div class="alert alert-warning">
    <strong>
        You have
        <a asp-action="PendingDeletions" style="color: #e05c1a; text-decoration: underline;">
            @pendingDeletionsCount pending deletion(s)
        </a>
        waiting for approval.
    </strong>
</div>

<div class="search-border">
    <div class="search-text">
        Search Inventory
    </div>

    <div class="search-length" style="display: flex; justify-content: center; align-items: center; height: 100vh; max-width: 800px; margin: 0 auto; padding: 0 10px;">
        <!-- Search Form -->
        <div class="search-form" style="width: 100%;">
            <form asp-action="Tier3Dashboard" method="get" style="width: 100%; display: flex; justify-content: center;">
                <div class="form-group" style="width: 100%; max-width: 600px; display: flex; align-items: center;">
                    <input type="text" name="searchString" class="form-control" placeholder="Search by Vendor or Serial Number" style="height: 35px; width: 100%; padding: 5px 10px; box-sizing: border-box;" maxlength="20" oninput="checkLength(this)" />
                </div>
            </form>
        </div>
    </div>

    <script>
        function checkLength(input) {
            if (input.value.length > 20) {
                input.value = input.value.substring(0, 20); // Trim to 20 characters
            }
        }
    </script>

    <div class="toggle-container" style="display: flex; align-items: center; justify-content: center;">
        <span class="toggle-text" style="color: white; font-weight: bold; margin-right: 10px;">
            Data View
        </span>
        <button id="toggleExpand" class="toggle-button" onclick="toggleColumns()" style="height: 25px; display: flex; align-items: center; justify-content: center;"></button>
    </div>
</div>

<button id="scrollToBottomButton" class="scroll-button">
    <i class="bi bi-arrow-down-circle"></i>
</button>

<form asp-action="UploadFile" method="post" enctype="multipart/form-data" novalidate>
    @Html.AntiForgeryToken()
    <div class="form-group">
        <label for="file">Upload CSV File(s):</label>
        <input type="file" name="files" class="form-control-file" multiple />
    </div>

    <button type="submit" class="btn btn-primary mt-2">Upload</button>
</form>

<div style="text-align: right; margin-bottom: 10px;">
    <a asp-controller="Tier3" asp-action="Create" style="color: #ac3e0b; font-weight: bold; text-decoration: none;">
        Create New Inventory Item
    </a>
</div>

<div style="margin-bottom: 15px;">
    <h4 style="color: #970000; font-size: 1.2rem;">Total Inventory Items: @ViewBag.TotalItems</h4>
</div>

<!-- Inventory Table -->
<form asp-action="DeleteSelected" method="post" id="deleteForm">
    <table id="inventoryTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th class="checkbox-column">
                    <input type="checkbox" class="form-check-input" id="selectAll" onclick="toggleSelectAll()" />
                </th>
                <th>Vendor</th>
                <th>Device Type</th>
                <th>Serial #</th>
                <th>Host Name</th>
                <th>Asset Tag</th>
                <th>Current Location</th>
                <th>Future Location</th>
                <th>Status</th>
                <th>Date Received</th>
                <th>Part ID</th>
                <th class="extra-column">Back Ordered</th>
                <th class="extra-column">Notes</th>
                <th class="extra-column">Product Description</th>
                <th class="extra-column">Ready</th>
                <th class="extra-column">Legacy Device</th>
                <th class="extra-column">Modified</th>
                <th class="extra-column">Created</th>
                <th class="extra-column">Created By</th>
                <th class="extra-column">Modified By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var item in Model)
                {
                    <tr>
                        <td class="checkbox-column">
                            <input type="checkbox" class="form-check-input item-checkbox" name="selectedSerialNumbers" value="@item.SerialNumber" />
                        </td>
                        <td>@item.Vendor</td>
                        <td>@item.DeviceType</td>
                        <td>@item.SerialNumber</td>
                        <td>@item.HostName</td>
                        <td>@item.AssetTag</td>
                        <td>@item.CurrentLocation</td>
                        <td>@item.FutureLocation</td>
                        <td>@item.Status</td>
                        <td>@(item.DateReceived.HasValue ? item.DateReceived.Value.ToString("MM/dd/yyyy") : "N/A")</td>
                        <td>@item.PartID</td>
                        <td class="extra-column">@item.BackOrdered</td>
                        <td class="extra-column">@item.Notes</td>
                        <td class="extra-column">@item.ProductDescription</td>
                        <td class="extra-column">@item.Ready</td>
                        <td class="extra-column">@item.LegacyDevice</td>
                        <td class="extra-column">@item.Modified</td>
                        <td class="extra-column">@item.Created</td>
                        <td class="extra-column">@item.CreatedBy</td>
                        <td class="extra-column">@item.ModifiedBy</td>
                        <td>
                            <a asp-controller="Tier3" asp-action="Edit" asp-route-serialNumber="@item.SerialNumber" class="btn btn-edit">Edit</a>
                            <a asp-controller="Tier3" asp-action="Delete" asp-route-serialNumber="@item.SerialNumber" class="btn btn-delete">Delete</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="20" class="text-center">No inventory items found.</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="center-container">
        <button type="button" class="btn btn-delete btn-sm centered-button" onclick="confirmDelete()">
            Delete Selected Items
        </button>
    </div>
</form>

<div style="margin-top: 15px; text-align: right;">
    <p style="font-weight: bold; color: #333;">
        Signed in as: <span style="color: #8B0000;">@ViewBag.UserType </span>
    </p>
</div>

<script>
    // Toggle select all checkboxes
    function toggleSelectAll() {
        const isChecked = document.getElementById('selectAll').checked;
        const checkboxes = document.querySelectorAll('.item-checkbox');
        checkboxes.forEach(checkbox => checkbox.checked = isChecked);
    }

    // Confirm Delete Functionality
    function confirmDelete() {
        const selectedItems = document.querySelectorAll('.item-checkbox:checked');
        if (selectedItems.length === 0) {
            alert('Please select at least one item to delete.');
            return;
        }

        const confirmMessage = `Are you sure you want to delete ${selectedItems.length} items?`;
        if (confirm(confirmMessage)) {
            document.getElementById('deleteForm').submit();
        }
    }
</script>

<!-- Additional Functions -->
<script>
    // JavaScript function to toggle the display of extra columns
    function toggleColumns() {
        var toggleButton = document.getElementById("toggleExpand");
        var extraColumns = document.querySelectorAll(".extra-column");
        var isActive = toggleButton.classList.toggle("active");

        // Show or hide extra columns based on toggle button state
        extraColumns.forEach(function (column) {
            column.style.display = isActive ? "table-cell" : "none";
        });
    }
</script>

<!-- Print Button -->
<div class="button-container">
    <button onclick="printInventoryTable()" class="btn btn-edit btn-sm">
        Print Inventory
    </button>
</div>
<script>
    function printInventoryTable() {
        var printContents = document.getElementById("inventoryTable").outerHTML;
        var originalContents = document.body.innerHTML;

        // Set the table contents in the body for printing
        document.body.innerHTML = printContents;

        // Trigger the print dialog
        window.print();

        // Restore the original contents after printing
        document.body.innerHTML = originalContents;
        window.location.reload(); // Reload to ensure scripts and layout restore
    }
</script>

<style>
    @@media print {
        /* Hide everything except the table */
        body * {
            visibility: hidden;
        }

        #inventoryTable, #inventoryTable * {
            visibility: visible;
        }

        #inventoryTable {
            position: absolute;
            left: 0;
            top: 0;
        }
    }
</style>

<!-- JavaScript to Scroll to Bottom -->
<script>
    const scrollToBottomButton = document.getElementById('scrollToBottomButton');

    scrollToBottomButton.addEventListener('click', () => {
        // Ensure the page scrolls to the very bottom smoothly
        window.scrollTo({
            top: document.documentElement.scrollHeight - window.innerHeight,
            behavior: 'smooth'
        });
    });
</script>



<script type="text/javascript">
    window.onload = function () {
        let messages = [];

        // Check for different types of TempData messages
        @if (TempData["SuccessMessage"] != null)
        {
            <text>messages.push("@TempData["SuccessMessage"]");</text>
        }
        @if (TempData["InfoMessage"] != null)
        {
            <text>messages.push("@TempData["InfoMessage"]");</text>
        }
        @if (TempData["DuplicateMessage"] != null)
        {
            <text>messages.push("@TempData["DuplicateMessage"]");</text>
        }

        // Display each message as an alert
        if (messages.length > 0) {
            alert(messages.join('\n'));
        }
    };
</script>

<script type="text/javascript">
    window.onload = function () {
        let messages = [];

        // Check for different types of TempData messages
        @if (TempData["SuccessMessage"] != null)
        {
            <text>messages.push("@TempData["SuccessMessage"]");</text>
        }
        @if (TempData["InfoMessage"] != null)
        {
            <text>messages.push("@TempData["InfoMessage"]");</text>
        }
        @if (TempData["DuplicateMessage"] != null)
        {
            <text>messages.push("@TempData["DuplicateMessage"]");</text>
        }

        // Display the messages if any exist
        if (messages.length > 0) {
            alert(messages.join('\n'));
        }
    };
</script>
